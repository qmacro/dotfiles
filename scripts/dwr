#!/usr/bin/env bash

# Delete workflow runs - dwr

# Given an "owner/repo" name, such as "qmacro/thinking-aloud",
# retrieve the workflow runs for that repo and present them in a
# list. Selected runs will be deleted. Uses the GitHub API.

# Requires gh (GitHub CLI)
# fzf (general-purpose command-line fuzzy finder)
# and jq (JSON processor)

set -o errexit
set -o pipefail

# Load common functions
readonly here="$(dirname "$0")"
source "$here/github.sh"

declare repo hostname

jqscript() {

  cat << EOF
      def symbol:
        sub("skipped"; "SKIP") |
        sub("success"; "GOOD") |
        sub("failure"; "FAIL");

      def tz:
        gsub("[TZ]"; " ");


      .workflow_runs[]
        | [
            (.conclusion | symbol),
            (.created_at | tz),
            .id,
            .event,
            .name
          ]
        | @tsv
EOF

}

selectruns() {

  gh --hostname "$hostname" api --paginate "/repos/$repo/actions/runs" \
    | jq -r -f <(jqscript) \
    | fzf --multi --reverse

}

deleterun() {

  local run id result
  run=$1
  id="$(cut -f 3 <<< "$run")"
  gh --hostname "$hostname" api -X DELETE "/repos/$repo/actions/runs/$id" \
  && result="OK!" \
  || result="BAD"
  printf "%s\t%s\n" "$result" "$run"

}

deleteruns() {

  local id
  while read -r run; do
    deleterun "$run"
    sleep 0.25
  done

}

main() {

  if [[ -n $1 ]]; then
    # If owner/repo passed as argument, take that, assume github.com.
    repo=$1
    hostname=github.com
  else
    # Otherwise assume we're in a git repo, so use the placeholders
    # and grab the hostname from the origin remote.
    if ! git status > /dev/null 2>&1; then
      echo "No repo specified and not in a repo dir"
      exit 1
    fi
    repo=':owner/:repo'
    hostname="$(get_hostname)"
  fi

  selectruns | deleteruns

}

main "$@"
