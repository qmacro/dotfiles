#!/usr/bin/env bash

# Ignore "Can't follow non-constant source" errors
# shellcheck disable=SC1090

# Sets me up for writing a new blog post

# Has a new special mode for execution from `savepost`; supply
# a tag in this form: sapcommunity-<sapcommunity-post-url> and
# the tag 'sapcommunity' will be added, plus an 'Originally posted
# on SAP Community' link will be added at the bottom of the body,
# with a link to the URL provided.

declare bloghome="$WORK/gh/github.com/qmacro/qmacro.github.io"
declare location="${0%/*}"

# Experimental lib functions
source "$location/lib/slugify"

set -eo pipefail
shopt -s extglob

create_file() {

  #[[ ! -f "$filename" ]] && create_file "$filename" "$title" "$postdate" "${tags[@]}"
  local filename=$1
  local title=$2
  local postdate=$3
  shift
  shift
  shift
  local originalurl

  # Ignore this instance of "Quote to prevent word splitting/globbing"
  # to be able to pull the rest of the arguments into the tags array.
  # shellcheck disable=SC2206
  local tags=($@)

  cat << EO_TEMPLATE > "$filename"
---
layout: post
title: $title
date: $postdate
EO_TEMPLATE

  # Add tags metadata if needed
  if [[ "${#tags[@]}" -gt 0 ]]; then
    echo "tags:" >> "$filename"
    for tag in "${tags[@]}"; do
      if [[ $tag =~ ^sapcommunity- ]]; then
        originalurl="${tag#sapcommunity-}"
        tag=sapcommunity
      fi
      echo "  - $tag" >> "$filename"
    done
  fi

  # Add end-of-frontmatter
  echo "---" >> "$filename"

  # Add link to original URL if needed
  if [[ -n $originalurl ]]; then
    echo "" >> "$filename"
    echo "[Originally published on SAP Community]($originalurl)" >> "$filename"
  fi

}

generate_filename() {

  # Generates a filename from the postdate and a slugified version
  # of the post title.
  local postdate=$1
  local title=$2
  echo "$bloghome/src/posts/$postdate-$(slugify "$title").md"

}

get_tags_and_date() {

  # Takes a space separated list of tags (potentially empty)
  # and determines what the tags are, picking anything that looks
  # like a date (yyyy-mm-dd) out and using that as the postdate,
  # defaulting to today's date if such a value is not provided.
  local tags i
  local postdate

  postdate="$(date +%Y-%m-%d)"

  # Look through the tags, capturing a postdate if there is one,
  # and consolidating the tags into an array.
  for i in "$@"; do
    if [[ $i =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
      postdate=$i
    else
      tags+=("$i")
    fi
  done

  # Return the postdate first, followed by any tags
  echo "$postdate" "${tags[@]}"

}

main() {

  local title filename

  # Get title, which must be provided
  title="${1:?Specify blog post title}"
  shift

  # Get postdate & tags from the rest of the values provided
  read -r postdate tags < <(get_tags_and_date "$@")

  # Generate the name for the Markdown file
  filename="$(generate_filename "$postdate" "$title")"

  # Create the blog post file if it doesn't already exist
  if [[ ! -f "$filename" ]]; then
    create_file "$filename" "$title" "$postdate" "${tags[@]}"
  fi

  # if

  $EDITOR "$filename"

}

main "$@"
